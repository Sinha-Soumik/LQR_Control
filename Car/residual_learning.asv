syms p_long p_lat heading v_long delta throttle delta_cmd;

Tc = 2;         % Time Constant
m = 1558;       % Vehicle Mass
lf = 1.462884;  % Distance from cg to front axle
lr = 1.405516;  % Distance from cg to rear axle
l = lf + lr;    

Cf = 1.432394487827058e+05; %
Cr = 2.214094963126969e+05;
g = 9.80655;



%parameters
num_samples = 1000;
x_bar = [0; 0; 0; 50; 0];
u_bar = [0; 0];

%generate training data
training_data = zeros(12, num_samples);

for i =1:num_samples
    %randomly generate specific state and control input values
    p_long = rand()*600-100; %random value between -100 to 500
    p_lat = rand()*100-50; %random value between -50 to 50
    heading = rand()*2*pi-pi;%random value between -pi to pi
    v_long = rand()*70-10;% random value between -10 to 60
    delta = rand()*pi/2-pi/4;%random value between -pi/4 to pi/4

    throttle = rand()*20-10; %random value between -10 to 10
    delta_cmd = rand()*pi/2-pi/4;%random value between -pi/4 to pi/4

    x = [p_long; p_lat; heading; v_long; delta];
    u = [throttle, delta_cmd];

    deviation = closedloopdyn(x, u) - closedloopdyn(x_bar, u_bar);

    delta_x = [p_long-x_bar(1); p_lat-x_bar(2); heading-x_bar(3); v_long-x_bar(4); delta-x_bar(5)];
    delta_u = [throttle-u_bar(1); delta_cmd-u_bar(2)];


    training_data(:, i) = [delta_x(1); delta_x(2); delta_x(3); delta_x(4); delta_x(5); delta_u(1); delta_u(2); deviation(1); deviation(2); deviation(3); deviation(4); deviation(5)];

end

% Flatten the training data into arrays
inputs = training_data(1:7, :);
targets = training_data(8:12, :);


% Create a feedforward neural network
net = feedforwardnet([10, 5]); % You can adjust the hidden layer sizes as needed



% Train the neural network
% disp(size(inputs));
% disp(size(targets));
net = train(net, inputs, targets);

% % Make predictions
% predicted_output = net(inputs);
% 
% % Display the original output and predicted output
% disp("Original Output:");
% disp(targets);
% disp("Predicted Output:");
% disp(predicted_output);



A = [0, 0, 0, 1, 0;
     0, 0, 50, 0, -49.9566;
     0, 0, 0, 0, 6.69245;
     0, 0, 0, -0.0013, 0;
     0, 0, 0, 0, -0.8];
         
B= [0, 0;
    0, 0;
    0, 0;
    2, 0;
    0, 0.8];


Q = diag([0.0000001, 1, 10, 10, 10]); %Cost on States
R = diag([1, 1]);            % Cost on Actions

%LQR
[K, ~, ~] = lqr(A, B, Q, R);
disp(K);

x0 = [0; 0; pi/4; 0; 0];
tspan = 0:0.01:10;


[t, X] = ode45(@(t, x) controldynamics(t, x, K, net), tspan, x0);

%plot
close all;
figure(1);
clf;
plot(t, X(:, 3), 'r', 'LineWidth', 1.5);
hold on;
plot(t, X(:, 5), 'b', 'LineWidth', 1.5);

xlabel('Time (s)');
ylabel('Heading(rad)/ Steering Angle (rad)');

yyaxis right;
plot(t, X(:, 4), 'g', 'LineWidth', 1.5);
plot(t, X(:, 2), 'p', 'LineWidth', 1.5);
xlabel('Time (s)');
ylabel('Lateral Position');
legend('Heading', 'Steering Angle', 'Lateral Position');
title('Car Control');
grid on;
hold off;


function dxdt = controldynamics(~, x, K, net)

    Tc = 2;         % Time Constant
    m = 1558;       % Vehicle Mass
    lf = 1.462884;  % Distance from cg to front axle
    lr = 1.405516;  % Distance from cg to rear axle
    l = lf + lr;    
    
    Cf = 1.432394487827058e+05; %
    Cr = 2.214094963126969e+05;
    g = 9.80655;



    v_long = x(4);
    heading = x(3);
    delta = x(5);

    u_bar = [0; 0];
    x_bar = [0; 0; 0; 50; 0];
    u = u_bar -K*delta_x;

    delta_x = x-x_bar;
    delta_u = u-u_bar;

    predicted_deviation = predict(net, [delta_x; delta_u]);
   
    u = u + predicted_deviation;
    

    dxdt = closedloopdyn(x, u)

            


    dxdt = [f1; f2; f3; f4; f5];


end


function dxdt = closedloopdyn(x, u)
    Tc = 2;         % Time Constant
    m = 1558;       % Vehicle Mass
    lf = 1.462884;  % Distance from cg to front axle
    lr = 1.405516;  % Distance from cg to rear axle
    l = lf + lr;    
    
    Cf = 1.432394487827058e+05; %
    Cr = 2.214094963126969e+05;
    g = 9.80655;
        
    heading = x(3);
    v_long = x(4);
    delta = x(5);

    throttle = u(1);
    delta_cmd = u(2);
  
    f1 = v_long*cos(heading)-((tan(delta)*v_long/(l+((m*g*lr/(l*Cf)-m*g*lf/(l*Cr)))*v_long^2/g))*(lr-m*v_long^2*lr/(Cr*l)))*sin(heading);
    f2 = v_long*sin(heading)+((tan(delta)*v_long/(l+((m*g*lr/(l*Cf)-m*g*lf/(l*Cr)))*v_long^2/g))*(lr-m*v_long^2*lr/(Cr*l)))*cos(heading);
    f3 = tan(delta)*v_long/(l+((m*g*lr/(l*Cf)-m*g*lf/(l*Cr)))*v_long^2/g);
    f4 = -Tc/m*v_long+Tc*throttle;
    f5 = 0.8*(delta_cmd-delta);

    dxdt = [f1; f2; f3; f4; f5];

end

    







